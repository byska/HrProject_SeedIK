// <auto-generated />
using System;
using HrProject.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HrProject.DataAccess.Migrations
{
    [DbContext(typeof(HrProjectContext))]
    partial class HrProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HrProject.Entities.Entities.AdvancePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserID");

                    b.ToTable("AdvancePayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1500.0,
                            AppUserID = 1,
                            Currency = 0,
                            Description = "ihtiyaç",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 15000.0,
                            AppUserID = 2,
                            Currency = 0,
                            Description = "ihtiyaç",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1500.0,
                            AppUserID = 1,
                            Currency = 0,
                            Description = "ihtiyaç",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3561),
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Amount = 10000.0,
                            AppUserID = 2,
                            Currency = 2,
                            Description = "Konaklama",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 2500.0,
                            AppUserID = 1,
                            Currency = 1,
                            Description = "seyahat",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 500.0,
                            AppUserID = 2,
                            Currency = 0,
                            Description = "ihtiyaç",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3567),
                            Status = 0,
                            Type = 1
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "09d4c234-9f36-4838-9056-7ebe7a94de97",
                            IsActive = true,
                            Name = "Çalışan"
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DismissalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SecondFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("JobID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Altunizade",
                            BirthDate = new DateTime(1998, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Sakarya",
                            CompanyID = 1,
                            ConcurrencyStamp = "7f01406d-d402-4b97-81f5-308450478c50",
                            DepartmentID = 2,
                            Email = "besteyasak@bilgeadamboost.com",
                            EmailConfirmed = false,
                            EmployeeImage = "",
                            FirstName = "Beste",
                            Gender = 0,
                            IsActive = true,
                            JobID = 1,
                            LastName = "Yasak",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Salary = 60000,
                            StartDate = new DateTime(2010, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TC = "651466416",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Beşiktaş",
                            BirthDate = new DateTime(1980, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Antalya",
                            CompanyID = 2,
                            ConcurrencyStamp = "2520f276-9d6c-465a-99ee-b9944cdfdf05",
                            DepartmentID = 3,
                            Email = "anilirmak@bilgeadamboost.com",
                            EmailConfirmed = false,
                            EmployeeImage = "",
                            FirstName = "Alp",
                            Gender = 1,
                            IsActive = true,
                            JobID = 2,
                            LastName = "Irmak",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Salary = 20000,
                            StartDate = new DateTime(2020, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TC = "2737373",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AktiflikDurumu")
                        .HasColumnType("bit");

                    b.Property<int>("CalisanSayisi")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("KurulusTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SozlesmeBaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SozlesmeBitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("TelefonNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unvan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VergiNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adres = "Altunizade Sokak No : 5 ",
                            AktiflikDurumu = true,
                            CalisanSayisi = 10,
                            CompanyName = "Yasak Holding",
                            Email = "holdingyasak@hotmail.com",
                            IsActive = true,
                            KurulusTarihi = new DateTime(1990, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoImage = "dglaşsgas",
                            MersisNo = "a001950190191534",
                            SozlesmeBaslangicTarihi = new DateTime(1998, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SozlesmeBitisTarihi = new DateTime(2040, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TelefonNo = "08508505050",
                            Unvan = "YASSAK",
                            VergiNo = "1240120512"
                        },
                        new
                        {
                            Id = 2,
                            Adres = "Altunizade Sokak No : 5 ",
                            AktiflikDurumu = true,
                            CalisanSayisi = 10,
                            CompanyName = "Bilge Adam",
                            Email = "holdingyasak@hotmail.com",
                            IsActive = true,
                            KurulusTarihi = new DateTime(1990, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoImage = "dglaşsgas",
                            MersisNo = "a001950190191565",
                            SozlesmeBaslangicTarihi = new DateTime(1998, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SozlesmeBitisTarihi = new DateTime(2040, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TelefonNo = "08508505050",
                            Unvan = "YASSAK",
                            VergiNo = "1240120512"
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "Yönetim",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "Web",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            DepartmentName = "Ar-Ge",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("ExpenseImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserID");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1500.0,
                            AppUserID = 1,
                            Currency = 1,
                            ExpenseImage = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3581),
                            Status = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2500.0,
                            AppUserID = 1,
                            Currency = 0,
                            ExpenseImage = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3585),
                            Status = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500.0,
                            AppUserID = 1,
                            Currency = 2,
                            ExpenseImage = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3586),
                            Status = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = 500.0,
                            AppUserID = 2,
                            Currency = 0,
                            ExpenseImage = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3619),
                            Status = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 200.0,
                            AppUserID = 2,
                            Currency = 2,
                            ExpenseImage = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Type = 0
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            JobName = "Yazılım Mühendisi"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            JobName = "Veri Bilimci"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            JobName = "Yönetici"
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserID");

                    b.HasIndex("TypeId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserID = 1,
                            EndDate = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            File = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3525),
                            StartDate = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TypeId = 6
                        },
                        new
                        {
                            Id = 2,
                            AppUserID = 1,
                            EndDate = new DateTime(2023, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            File = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3527),
                            StartDate = new DateTime(2023, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TypeId = 4
                        },
                        new
                        {
                            Id = 3,
                            AppUserID = 1,
                            EndDate = new DateTime(2023, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            File = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3529),
                            StartDate = new DateTime(2023, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TypeId = 5
                        },
                        new
                        {
                            Id = 4,
                            AppUserID = 2,
                            EndDate = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            File = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3530),
                            StartDate = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TypeId = 7
                        },
                        new
                        {
                            Id = 5,
                            AppUserID = 2,
                            EndDate = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            File = "",
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3532),
                            StartDate = new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TypeId = 7
                        },
                        new
                        {
                            Id = 6,
                            AppUserID = 1,
                            EndDate = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3534),
                            StartDate = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            AppUserID = 2,
                            EndDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            RequestDate = new DateTime(2023, 5, 30, 0, 31, 50, 502, DateTimeKind.Local).AddTicks(3535),
                            StartDate = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("HrProject.Entities.Entities.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFileRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionDay")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gender = 2,
                            IsActive = true,
                            IsFileRequired = false,
                            PermissionDay = 0,
                            PermissionName = "Yıllık İzin < 1"
                        },
                        new
                        {
                            Id = 2,
                            Gender = 2,
                            IsActive = true,
                            IsFileRequired = false,
                            PermissionDay = 14,
                            PermissionName = "Yıllık İzin < 5"
                        },
                        new
                        {
                            Id = 3,
                            Gender = 2,
                            IsActive = true,
                            IsFileRequired = false,
                            PermissionDay = 20,
                            PermissionName = "Yıllık İzin > 5"
                        },
                        new
                        {
                            Id = 4,
                            Gender = 2,
                            IsActive = true,
                            IsFileRequired = true,
                            PermissionDay = 20,
                            PermissionName = "Mazeret"
                        },
                        new
                        {
                            Id = 5,
                            Gender = 0,
                            IsActive = true,
                            IsFileRequired = true,
                            PermissionDay = 32,
                            PermissionName = "Annelik"
                        },
                        new
                        {
                            Id = 6,
                            Gender = 1,
                            IsActive = true,
                            IsFileRequired = true,
                            PermissionDay = 5,
                            PermissionName = "Babalık İzni"
                        },
                        new
                        {
                            Id = 7,
                            Gender = 2,
                            IsActive = true,
                            IsFileRequired = true,
                            PermissionDay = 3,
                            PermissionName = "Ölüm İzni"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HrProject.Entities.Entities.AdvancePayment", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppUser", "AppUser")
                        .WithMany("AdvancePayments")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.AppUser", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.Company", "Company")
                        .WithMany("AppUsers")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrProject.Entities.Entities.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrProject.Entities.Entities.Job", "Job")
                        .WithMany("AppUsers")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Expense", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppUser", "AppUser")
                        .WithMany("Expenses")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Permission", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppUser", "AppUser")
                        .WithMany("Permissions")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrProject.Entities.Entities.PermissionType", "Type")
                        .WithMany("Permissions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrProject.Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HrProject.Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HrProject.Entities.Entities.AppUser", b =>
                {
                    b.Navigation("AdvancePayments");

                    b.Navigation("Expenses");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Company", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Department", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.Job", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HrProject.Entities.Entities.PermissionType", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
